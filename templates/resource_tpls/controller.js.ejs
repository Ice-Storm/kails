import <%= modelInstance %> from '../../models/<%= model %>'

/**
 * @api {post} /<%= model %> Create a new <%= modelName %>
 * @apiPermission <%= modelName %>
 * @apiVersion <%= version %>
 * @apiName <%- `Create${modelInstance}` %>
 * @apiGroup <%= modelInstance %>
 *
 * @apiParam {Object} <%= modelName %>          <%= modelInstance %> object (required)
 * @apiSuccess {Object}   <%= model %>           <%= modelInstance %> object
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       Your api success response
 *     }
 *
 * @apiError UnprocessableEntity Missing required parameters
 *
 * @apiErrorExample {json} Error-Response:
 *     HTTP/1.1 422 Unprocessable Entity
 *     {
 *        Your api failed response
 *     }
 */
export async function <%- `create${modelInstance}` %> (ctx) {
  const <%= modelName %> = new <%= modelInstance %>(ctx.request.body.<%= modelName %>)
  try {
    await <%= modelName %>.save()
  } catch (err) {
    ctx.throw(422, err.message)
  }
  ctx.body = { <%= modelName %> }
}

/**
 * @api {get} /<%= model %> Get all <%= model %>
 * @apiPermission <%= modelName %>
 * @apiVersion <%= version %>
 * @apiName Get<%= modelInstance %>
 * @apiGroup <%= model %>
 *
 * @apiSuccess {Object} <%= modelName %>          <%= modelName %> objects
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       Your api success response
 *     }
 *
 *
 * @apiErrorExample {json} Error-Response:
 *     HTTP/1.1 422 Unprocessable Entity
 *     {
 *        Your api failed response
 *     }
 */
export async function get<%= modelInstancePluralize %> (ctx) {
  const <%= modelName %> = await <%= modelInstance %>.find(ctx.request.body.<%= modelName %>.id)
  ctx.body = {<%= modelName %> }
}

/**
 * @api {get} /<%= model %>/:id Get <%= modelName %> by id
 * @apiPermission <%= modelName %>
 * @apiVersion <%= version %>
 * @apiName Get<%= modelInstance %>
 * @apiGroup <%= model %>
 *
 * @apiSuccess {Object}   <%= model %>           <%= modelInstance %> object
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       Your api success response
 *     }
 *
 * @apiErrorExample {json} Error-Response:
 *     HTTP/1.1 422 Unprocessable Entity
 *     {
 *        Your api failed response
 *     }
 */
 */
export async function get<%= modelInstance %> (ctx, next) {
  try {
    const <%= modelName %> = await <%= modelInstance %>.findById(ctx.params.id)
    if (!<%= modelName %>) {
      ctx.throw(404)
    }

    ctx.body = { <%= modelName %> }
  } catch (err) {
    if (err === 404 || err.name === 'CastError') {
      ctx.throw(404)
    }
    ctx.throw(500)
  }

  if (next) { return next() }
}

/**
 * @api {put} /<%= model %>/:id Update a <%= modelName %>
 * @apiPermission  <%= modelName %>
 * @apiVersion <%= version %>
 * @apiName Update<%= modelInstance %>
 * @apiGroup <%= model %>
 *
 * @apiParam {Object} <%= modelName %>          <%= modelInstance %> object (required)
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       Your api success response
 *     }
 *
 * @apiError UnprocessableEntity Missing required parameters
 *
 * @apiErrorExample {json} Error-Response:
 *     HTTP/1.1 422 Unprocessable Entity
 *     {
 *       "status": 422,
 *       Your api failed response
 *     }
 */
export async function update<%= modelInstance %> (ctx) {
  const <%= modelName %> = ctx.body.<%= modelName %>
  Object.assign(<%= modelName %>, ctx.request.body.<%= modelName %>)

  await <%= modelName %>.save()

  ctx.body = { <%= modelName %> }
}

/**
 * @api {delete} /<%= model %>/:id Delete a <%= modelName %>
 * @apiPermission  <%= modelName %>
 * @apiVersion <%= version %>
 * @apiName Delete<%= modelInstance %>
 * @apiGroup <%= model %>
 *
 *
 * @apiSuccess {StatusCode} 200
 *
 * @apiSuccessExample {json} Success-Response:
 *     HTTP/1.1 200 OK
 *     {
 *       "success": true
 *     }
 *
 * @apiErrorExample {json} Error-Response:
 *     HTTP/1.1 422 Unprocessable Entity
 *     {
 *       "status": 422,
 *       Your api failed response
 *     }
 */

export async function delete<%= modelInstance %> (ctx) {
  const <%= modelName %> = ctx.body.<%= modelName %>

  await <%= modelName %>.remove()

  ctx.status = 200
  ctx.body = { success: true }
}
